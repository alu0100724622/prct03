espuestas


21. ¿Qué diferencia hay entre "\t\n" y ’\t\n’?  
	El primero muestra un tabulador (puts "\t\n" ) y el segundo la cadena que le pasamos (puts ’\t\n’)

22. ¿Cómo funciona %q? ¿Qué es %q{hello world\n}? ¿Qué es %q{’a’ ’b’ ’c’}?
	La salida de %q{hello world\n} es = hello world\n, es decir nos muestra todo lo que tenemos entre las llaves interpretando todo como si fuera un string. 
q minúscula muestra lo que está entre llaves como si estuviera entre comillas simples, es decir nos muestra todo.
	Por ejemplo, %q{\t \n}, independientemente de que \t y \n se encuentre entre comillas simples o comillas dobles, lo mostrará como si estuviera entre comillas simples.


23. ¿Cómo funciona %Q? ¿Qué es %Q{hello world\n}? ¿Qué es %Q{"a" "b" "c"}?
La salida de %Q{hello world\n} es = hello world, es decir nos muestra solo la cadena de caracteres y reconoce el \n como retorno de carro. 
Q mayúscula muestra lo que está entre llaves como si estuviera entre comillas dobles, es decir sólo nos muestra la cadena de caracteres.
Por ejemplo, %Q{\t \n}, independientemente de que \t y \n se encuentre entre comillas simples o comillas dobles, lo mostrará como si estuviera entre comillas dobles.


24. ¿Qué queda en c?
irb(main):001:0> a = 4
=> 4
irb(main):002:0> b =2
=> 2
irb(main):003:0> c = <<HERE
irb(main):004:0" --#{a}--
irb(main):005:0" --#{b}--
irb(main):006:0" HERE

La salida para c es = “--4--\n--2--\n”, es decir, ponemos el HERE y nos muestra todo lo que tenemos a continuación hasta el otro HERE.


25. ¿Qué queda en c?
irb(main):001:0> a = 4
=> 4
irb(main):002:0> b =2
=> 2
irb(main):008:0> c = <<’HERE’
irb(main):009:0’ --#{a}--
irb(main):010:0’ --#{b}--
irb(main):011:0’ HERE

La salida para c es = “--\#{a}--\n--\#{b}--\n”, es decir al tener ‘HERE’ las comillas simples nos muestra todo como si fuera un string.

26. s = "hello". ¿Cuál es el valor de las siguientes expresiones?

s[0,2] 
La salida es “he”, es decir empieza el 0 en la h y a partir de ahí contamos 2 caracteres.
s[-1,1]
La salida es “o”, es decir empieza en el -1 en el 0 y a partir de ahí contamos 1 caracter.
s[0,10]
La salida es “hello”, es decir empieza en el 0 en la h y a partir de ahí contamos 10 caracteres, que en este caso como solo hay 5 nos quedamos ahí.

27. ¿Qué queda en g?
>> g = "hello"
=> "hello"
>> g << " world"

La salida en g es: “hello world”, es decir que a lo que tenemos en g le añadimos lo que sigue después del <<, en este caso la cadena “world”.

28. ¿Qué queda en e?
>> e = ’.’*3

la salida es:  … ,es decir se multiplica lo que está escrito entre comillas simples por el número indicado, en este caso es 3.

29. ¿Cuál es el resultado?
>> a = 1
=> 1
>> "#{a=a+1} "*3

La salida es: “222”, es decir lo que tenemos en a lo sustituimos por el valor añadido al principio (en este caso es 1) y el resultado de esto es 2, y a esto lo multiplicamos por el número indicado, en este caso es 3.

30. ¿Qué es esto? %w[this is a test]

La salida es: [“this”, “is”, “a”, “test”], el comando %w crea un array con lo que se escribe entre corchetes, separándose los elementos por espacios en blanco, es decir, cada palabra separada por espacio en blanco es un elemento del array. En este caso el array cuenta con cuatro elementos.

31. ¿Qué es esto? %w[\t \n]

La salida es: [“\\t”, “\\n”], pasa lo mismo que en el caso anterior que crea un array pero si hacemos un puts %w[\t \n], al ser la w minúscula nos muestra todos los caracteres \t,\n. 

32. ¿Qué es esto? %W[\t \n]
La salida es: [“\t”, “\n”], pasa lo mismo que el anterior que crea un array, pero en este caso haría el retorno de carro y el tabulador.Es

33. ¿Qué contiene nils? nils = Array.new(3)

La salida muestra el array [nil, nil, nil]. Escribir Array.new(nº de elementos del array) es otra forma de crear un array.

34. ¿Qué contiene zeros? zeros = Array.new(3, 0)

La salida muestra el array [0, 0, 0]. La primera parte del Array.new corresponde a la cantidad de elementos del array, y la segunda parte al número o carácter con el que se quiere rellenar el array.

35. ¿Qué queda en b?
>> x = [[1,2],[3,4]]
=> [[1, 2], [3, 4]]
>> b = Array.new(x)

La salida es: [[1,2],[3,4]], ya que al crear un nuevo array de x se creará un nuevo array con el valor de x.

36. ¿Qué queda en c?
>> c = Array.new(3) { |i| 2*i }

La salida es [0, 2, 4]. 
El parámetro i entre barras verticales (|i|) quiere decir que le pasa dicho parámetro al array, como el array tiene tres elementos, por defecto el primer parámetro es 0, continuando por 1, 2, 3, etc. Por lo tanto, el array se rellenará con los valores 0, 1 y 2, que multiplicados por 2 dan como resultado 0, 2 y 4. 

37. ¿Cuál es el resultado de cada una de estas operaciones?
>> a = (’a’..’e’).to_a
=> ["a", "b", "c", "d", "e"]

>> a[1,1]
=> [“b”] 

>> a[-2,2]
=> [“d”, “e”]

>> a[0..2] Muestra todos los caracteres de 0 hasta 2.
=> [“a”, “b”, “c”]

>> a[0...1]
=> [“a”, “b”] Muestra todos los caracteres de 0 hasta 1

>> a[-2..-1]
=> [“d”, “e”] Muestra todos los caracteres de -2 hasta -1

38. ¿Cuál es el resultado de cada una de estas operaciones?
>> a
=> ["a", "b", "c", "d", "e"]

>> a[0,2] = %w{A B}
=> ["A", "B"]

>> a
=> [“A”, “B”, “c”, “d”, “e”], es decir, le decimos que desde la posición 0 cambie los dos caracteres y los sustituye por A B.

>> a[2..5] = %w{C D E}
=> ["C", "D", "E"]

>> a
=> [“A”, “B”, “C”, “D”, “E”], le decimos que cambie desde la posición 2 hasta la 5 por los caracteres que les pasamos, en este caso C, D, E.

>> a[0,0] = [1,2,3]
=> [1, 2, 3]

>> a
=> [1, 2, 3, “A”, “B”, “C”, “D”, “E”]

>> a[0,2] = []
=> []

>> a
=> [3, “A”, “B”, “C”, “D”, “E”]

>> a[-1,1] = [ ’Z’ ]
=> ["Z"]

>> a
=> [3, “A”, “B”, “C”, “D”, “Z”]

>> a[-2,2] = nil
=> nil

>> a
=> [3, “A”, “B”, “C”, nil]

39. ¿Cuál es el resultado de cada una de estas operaciones?
>> a = (1...4).to_a
=> [1, 2, 3], crea un array con número de elementos igual a la diferencia entre 4 y 1, siendo dichos elementos los propios números.

>> a = a + [4, 5]
=> [1, 2, 3, 4, 5], añade al array anterior los elementos 4 y 5.

>> a += [[6, 7, 8]]
=> [1, 2, 3, 4, 5, [6, 7, 8]], añade un elemento más al array, en este caso éste elemento es otro array.

>> a = a + 9
=> da un error de conversión de fixnum a array.

40. ¿Cuál es el resultado de cada una de estas operaciones?
>> x = %w{a b c b a}
=> [“a”, “b”, “c”, “b”, “a”]

>> x = x - %w{b c d}
=> [“a”, “a”], elimina los elementos “b”, “c” y “b”.


41. ¿Cuál es el resultado de cada una de estas operaciones?
>> z = [0]*8
=> [0, 0, 0, 0, 0, 0, 0, 0] El valor 0 lo duplica 8 veces. 

42. ¿Cuál es el resultado de cada una de estas operaciones?
>> a = []
=> []

>> a << 1
=> [1]

>> a << 2 << 3
=> [1, 2, 3]

>> a << [4, 5, 6]
=> [1, 2, 3, [4, 5, 6]]

>> a.concat [7, 8]
=> [1, 2, 3, [4, 5, 6], 7, 8]

43. ¿Cuál es el resultado de cada una de estas operaciones?
>> a = [1, 1, 2, 2, 3, 3, 4]
=> [1, 1, 2, 2, 3, 3, 4]

>> b = [5, 5, 4, 4, 3, 3, 2]
=> [5, 5, 4, 4, 3, 3, 2]

>> c = a | b
=> [1, 2, 3, 4, 5] Escogemos todos los elementos y con el orden del primero, en este caso de a.

>> d = b | a
=> [5, 4, 3, 2, 1]

>> e = a & b
=> [2, 3, 4] Solo cogemos los elementos que se repiten y con el orden del primero.

>> f = b & a
=> [4, 3, 2]

44. ¿Qué resultados dan las siguientes operaciones?
>> a = 1..10
=> 1..10

>> a.class
=> Range

>> a.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

>> b = 1...10
=> 1....10

>> b.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

>> b.include? 10
=> true

>> b.include? 8
=> true

>> b.step(2) {|x| print "#{x} " }
13579 => 1..10

>> 1..3.to_a
=> 

45. ¿Qué resultados dan las siguientes operaciones?
>> r = 0...100
=> 0....100
>> r.member? 50
=> true; El 50 esta en el rango del 0 al 100.
>> r.include? 99.9
=> true; El 99.9 esta en el rango del 0 al 100. 
>> r.member? 99.9
=> true; El 99.9 esta en el rango del 0 al 100.

NOTA: Prácticamente no existe la diferencia entre ‘member’ e ‘include’. 

46. ¿Qué resultados dan las siguientes operaciones? 
>> true.class
=> TrueClass

>> false.class
=> FalseClass

>> puts "hello" if 0
hello
=> nil

En ruby el 0, a diferencia de otros lenguajes, se interpreta como verdadero.

>> puts "hello" if nil
=> nil

>> puts "hello" if ""  
hello
=> nil

Al igual que con el 0, la cadena vacía se interpreta también como verdadero.


47. ¿Qué resultados dan las siguientes operaciones?
>> x = :sym
=> :sym

>> x.class
=> Symbol

>> x == ’sym’
=> false

>> x == :sym
=> true

>> z = :’a long symbol’
=> :"a long symbol"

>> z.class
=> Symbol

>> x == ’sym’.to_sym
=> true

>> x.to_s == ’sym’
=> true


48. ¿Qué resultados se dan?
>> s = "Ruby"
=> "Ruby"
>> t = s
=> "Ruby"
>> t[-1] = ""
=> ""
>> print s
Rub => nil
>> t = "Java"
=> "Java"
>> print s, t
RubJava => nil


49. ¿Cuál es el resultado?
>> "%d %s" % [3, "rubies"]
=> “3 rubies”. Nos dice "%d %s" que primero le ponemos un dígito y luego un string, es más bien el formato que le queremos dar a las cadenas.
Por ejemplo "%d  \n %s" % [3, "rubies"], estamos ejecutando un retorno de carro, por lo tanto nos mostrara: 3
		rubies

50. ¿Cuáles son los resultados?
>> x, y = 4, 5
=> [4, 5]

>> z = x > y ? x : y		// x > y ? representa una condición
=> 5      
Cuando es verdadero se le asigna el valor de la izquierda  de los dos puntos (:) y cuando es falso el valor de la derecha.

>> x,y,z = [1,2,3]
=> [1, 2, 3]

51. ¿Qué resultados dan las siguientes operaciones?
>> x = { :a => 1, :b => 2 }
=> {:b=>2, :a=>1}

>> x.keys
=> [:a, :b]

>> x.values
=> [1, 2]

>> x[:c] = 3
=> 3

>> x
=> {:a=>1, :b=>2, :c=>3}

>> x.delete(’a’)
=> nil

>> x
=>

>> x.delete(:a)
=> 1

>> x
=> {:b=>2, :c=>3} 

>> x = { :a => 1, :b => 2, :c => 4 }
=> {:b=>2, :c=>4, :a=>1}

>> x.delete_if { |k,v| v % 2 == 0 }
=> {:a=>1} 
La expresión indica que se borre el elemento de x en caso de que el valor de la llave sea un número par (módulo 2 = 0), por lo tanto, b = 2 y c = 4 son eliminados. 

>> x
=> {:a=>1} 

52. ¿Qué hace yield 4, 5?

yield 4 → llama al bloque con argumento 4
yield 5 → llama al bloque con argumento 5

53. ¿Qué hace la siguiente sentencia? counts = Hash.new(0) ¿Qué diferencia hay con la asignación counts = {}?

>> counts = Hash.new(0)
=> {}

>> counts = {}
=> {}

No hay ninguna diferencia, ya que las dos sentencias nos devuelve lo mismo.c,

54. ¿Qué retorna esta expresión? ’hello world, hello LPP’.scan /\w+/

Retorna ["hello", "world", "hello", "LPP"], lo convierte en un array con número de elementos igual al número de palabras, en donde cada palabra es un elemento.


55. Explique que hacen estas sentencias:
c = { :a => 3, :b => 2, :c => 1 }
Asigna {:a=>3, :b=>2, :c=>1} a la variable c. La c es una variable de tipo hash 


c.keys.sort.each { |k| puts c[k] }
3
2
1
=> [:a, :b, :c]  La c. keys coge los valores (3, 2, 1), el short los ordena, (en este caso de mayor a menor) y el each imprime los valores del hash, es como decir el a imprime el valor 3, el b imprime el valor 3 y c imprime el valor 1.

